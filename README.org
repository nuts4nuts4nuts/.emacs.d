#+title: Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Org file that makes an el file

Hello! This is an org-mode file that automatically generates an init.el file for emacs configuration. Cool, huh?

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =dkj/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is in my .emacs.d directory and, if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
  (defun dkj/org-babel-tangle-config ()
    "Automatically tangle our config.org config file when we save it"
    (when (string-equal (file-name-directory (buffer-file-name))
			(expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'dkj/org-babel-tangle-config)))
#+end_src

** Personal customization
*** Settings

These are some basic settings to make life a little better. They don't relate to packages or anything fancy like that.

#+begin_src emacs-lisp
  ;; Turn off all the bars
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  ;; Except the tab bar ;)
  (tab-bar-mode 1)

  ;; Always prompt before exiting
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; Turn off the beeping with visible-bell
  (setq visible-bell t)

  ;; command is a lot more ergonomic than option
  ;; also, less confusing when going back and forth between mac and windows
  (setq mac-command-modifier 'meta)

  ;; Allow the mouse in terminal mode
  (xterm-mouse-mode 1)

  ;; I can't see a god damn at this small font size
  (defun dkj/font-height (height)
    "Prompts the user for a height and sets the font height.
  Uses the prefix arg if one is provided."
    (interactive "NHeight: ")
    (set-face-attribute 'default nil :height height))
  (dkj/font-height 140)

  ;; Automatically set view-mode when in a readonly buffer
  ;; Set a buffer as readonly with C-x C-q
  (setq view-read-only t)

  ;; Use bar cursor since it matches the emacs model better
  (setq-default cursor-type 'bar)

  ;; Add more context when scrolling around
  (setq next-screen-context-lines 10)

  ;; Move to the top or bottom of the buffer when scrolling
  (setq scroll-error-top-bottom 1)

  ;; Bigger global mark ring
  (setq global-mark-ring-max 50)

  ;; Show column 80
  (setq fill-column 80)
  (global-display-fill-column-indicator-mode)

  ;; Prefer vertical splits in more cases
  (setq split-width-threshold 90)
  (setq split-height-threshold 100)

  ;; Backup to the ~/.emacs.d/backups directory
  (setq backup-directory-alist
	`(("." . ,(concat user-emacs-directory "backups"))))

  ;; When I send mail from emacs, open the default mail client (because I haven't set up sending mail from emacs yet).
  (setq send-mail-function 'mailclient-send-it)

  ;; Put the menu bar in the tab bar, to help with discoverability
  (defun dkj/tab-bar-format-menu-bar ()
  "Produce the Menu button (denoted as λ) for the tab bar that shows the menu bar."
  `((menu-bar menu-item (propertize "λ" 'face 'tab-bar-tab-inactive)
     tab-bar-menu-bar :help "Menu Bar")))
  (add-to-list 'tab-bar-format #'dkj/tab-bar-format-menu-bar)

  ;; Winner mode remembers my window layouts
  (winner-mode 1)

  ;; Save minibuffer history across sessions
  (savehist-mode 1)

  ;; Automatically pull changes to files from disk
  (global-auto-revert-mode 1)
  ;; Same for non-file buffers (like dired, maybe magit?)
  (setq global-auto-revert-non-file-buffers t)

  ;; Default to lax whitespace in isearch and match any char
  (setq search-whitespace-regexp ".*")
  (setq isearch-lax-whitespace t)
  (setq isearch-regexp-lax-whitespace nil)
#+end_src

*** Mappings

**** C-z as my personal keymap
By default, =C-c <letter>= is supposed to be reserved for user-defined commands.
This is not my favorite for a couple of reasons:
1. Some modes map =C-c <letter>= for some =<letter>= s
2. =C-c <letter>= is harder to press quickly than =C-c C-<letter>=, and =C-c C-<letter>= is explicitly reserved for modes to map.

So I want to make a own prefix, on which I can bind anything I like.
I've chosen =C-z= for this, since suspending Emacs is not something I intend on doing very often.
#+begin_src emacs-lisp
  (define-prefix-command 'dkj-keys)
  (global-set-key (kbd "C-z") #'dkj-keys)
#+end_src

#+begin_src emacs-lisp
  ;; Reserve this for tmux. Previously toggle-input-method
  (global-unset-key (kbd "C-\\"))

  ;; query replace with regexp by default
  ;; Swap bindings with plain query replace
  (global-set-key (kbd "M-%") #'query-replace-regexp)
  (global-set-key (kbd "C-M-%") #'query-replace)

  ;; Easier window movement
  (global-set-key (kbd "C-x C-1") #'delete-other-windows)
  (global-set-key (kbd "C-x C-2") #'split-window-below)
  (global-set-key (kbd "C-x C-3") #'split-window-right)
  (global-set-key (kbd "C-x C-0") #'delete-window)
  (global-set-key (kbd "C-x C-o") #'other-window)

  ;; Kill line backwards
  (global-set-key (kbd "M-<backspace>") (lambda () (interactive) (kill-line 0)))

  ;; Use dwim versions of upcase and downcase instead of char/word/region-specific verions
  (global-set-key (kbd "M-u") #'upcase-dwim)
  (global-set-key (kbd "M-l") #'downcase-dwim)

  ;; Use cycle-spacing since it replaces just-one-space,
  ;; delete-horizontal-space, and delete-blank-lines all in one
  (global-set-key (kbd "M-SPC") #'cycle-spacing)

  ;; Bind M-v to go from the completions buffer to the minibuffer,
  ;; mirroring the minubuffer binding to go to completions
  (define-key completion-list-mode-map (kbd "M-v") #'switch-to-minibuffer)
#+end_src

*** Functions

#+begin_src emacs-lisp
  ;; C-c h to open this file, my config
  (defun dkj/open-config ()
    "Open this file"
    (interactive)
    (push-mark)
    (find-file "~/.emacs.d/README.org"))
  (define-key dkj-keys (kbd "C-h") #'dkj/open-config)

  ;; Pulse for a little longer than the default
  (setq pulse-delay 0.1)
  ;; Pulse the line when I get lost
  (defun dkj/pulse-line (&rest _)
    "Pulse the current line."
    (pulse-momentary-highlight-one-line (point)))
  (dolist (command '(scroll-up-command scroll-down-command
				       recenter-top-bottom other-window))
    (advice-add command :after #'dkj/pulse-line))
#+end_src
  
** Packages
*** Using packages

Packages are hip and cool and emacs is pretty good at using them.

#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

**** Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

*** Which-key

=which-key= is a package which describes available key bindings interactively. If you use a binding which prefixes other bindings and then wait, it will pop up a small buffer with the available follow ups.

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

*** term-keys

Terminal emacs is hell.
When we have to use it, term-keys helps.

#+begin_src emacs-lisp
  (when (not (display-graphic-p))
    (add-to-list 'package-archives
                 '("cselpa" . "https://elpa.thecybershadow.net/packages/"))
    (use-package term-keys
      :config
      (term-keys-mode t)))
#+end_src

*** Pretty colors

#+begin_src emacs-lisp
  (use-package gruvbox-theme)
  (load-theme 'gruvbox-dark-hard t)
#+end_src

*** Magit

Magit is a git frontend. People really like it. I'm used to fugitive. Anyway, this is Emacs, so we use Magit.

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

*** Marginalia
[[https://github.com/minad/marginalia][Marginalia]] adds more context to minibuffer completions.

#+begin_src emacs-lisp
  (use-package marginalia
    :init
    (marginalia-mode))
#+end_src
*** Embark

*** Language support

Packages for configuring support of various computer languages

**** Markdown

In emacs we want to mostly write [[Org mode stuff][org-mode]] when it comes to markup languages. Still, markdown is useful.

#+begin_src emacs-lisp
  (use-package markdown-mode)
#+end_src

**** Racket

racket-mode is so good dude. I can't go back to vim.

#+begin_src emacs-lisp
  (use-package racket-mode)
#+end_src

*** Org mode stuff

Org-mode is cool. That's an understatement, org-mode is one of the main reasons to use Emacs.

**** org-mode general settings

#+begin_src emacs-lisp
  (setq org-directory "~/org/"
	org-agenda-files '("~/org/")
	org-id-locations-file "~/org/.org-id-locations"
	org-startup-truncated nil)

  ;; Make inserting new list items a little cleaner
  (with-eval-after-load "org"
    (define-key org-mode-map (kbd "M-<return>") #'org-insert-item))
#+end_src

**** Markdown export

Markdown is still useful, so we need a backend to export to it.

#+begin_src emacs-lisp
  (setq org-export-backends '(ascii html icalendar latex md odt))
#+end_src

**** Org execute other languages inline

With C-c C-c

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (python . t)
     ))

  (setq org-babel-python-command "python3")
#+end_src

** Load other files
I like to keep everything in one file, but sometimes stuff needs to go in other files for cleanliness or confidentiality.

#+begin_src emacs-lisp
  ;; Load customize stuff
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))

  ;; Load Google stuff
  (let ((googel (concat user-emacs-directory "google.el")))
    (when (file-exists-p googel)
      (load googel)))
#+end_src
